fun applyRule110(left: int, middle: int, right: int) -> int {
    if left == 1 && middle == 1 && right == 1 {
        return 0
    } else if left == 1 && middle == 1 && right == 0 {
        return 1
    } else if left == 1 && middle == 0 && right == 1 {
        return 1
    } else if left == 1 && middle == 0 && right == 0 {
        return 0
    } else if left == 0 && middle == 1 && right == 1 {
        return 1
    } else if left == 0 && middle == 1 && right == 0 {
        return 1
    } else if left == 0 && middle == 0 && right == 1 {
        return 1
    } else if left == 0 && middle == 0 && right == 0 {
        return 0
    }
    return -1
}

fun rule110(input: [int]) -> [int] {
    //Create initial list with 0 padding on either side
    let currentList = make([int])
    append(currentList, 0)
    for number in input {
        append(currentList, number)
    }
    append(currentList, 0)

    //Define Rule 110 logic
    //Apply rule 110 to each element in currentList and generate nextList
    let nextList = make([int])
    let length = len(currentList) - 1
    for i in 1..length {
        let left = currentList[i - 1]
        let middle = currentList[i]
        let right = currentList[i + 1]
        append(nextList, applyRule110(left, middle, right))
    }

    return nextList
}

fun show(cells: [int]) {
    for cell in cells {
        if cell == 0 {
            print(" ")
        } else {
            print("*")
        }
    }
    print("\n")
}

fun main() {
    let i = 0
    let w = 35
    let cells = make([int])
    i = 0
    while i < w {
        append(cells, 0)
        i = i + 1
    }    
    append(cells, 1)
    i = 0
    while i < w {
        show(cells)
        cells = rule110(cells)
        i = i + 1
    }
    show(cells)
}

