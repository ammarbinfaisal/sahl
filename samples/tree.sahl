extern fun concat(s1: string, s2: string) -> string {}

type BinaryTree = BinaryTree((int, BinaryTree, BinaryTree)) | Leaf;

fun printTree(tree: BinaryTree) {
    match tree {
        BinaryTree(x) -> {
            let (value, left, right,) = x;
            printTree(left);
            print(value, "\n");
            printTree(right);
        }
        Leaf -> {
            print("Leaf\n");
        }
    }
}

fun tree_of(n: int) -> BinaryTree {
    if (n == 0) {
        return Leaf;
    }
    let left = tree_of(n - 1);
    let right = tree_of(n - 1);
    return BinaryTree((n, left, right,));
}

fun main() {
    let tree = tree_of(2);
    printTree(tree);
}
