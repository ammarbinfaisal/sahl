// matmulc, relu and signkoid modify the matrix in place and return the same matrix
// This code is errneous


extern fun randf() -> double {}

extern fun pow(a : double, b : double) -> double {}

extern fun exit(code : int) {}

extern fun exp(a : double) -> double {}

fun randmat(r: int, c: int) -> [[double]] {
    let m = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m[i][j] = randf() / 10.0;
        }
    }
    return m;
}

fun submat(m1 : [[double]], m2 : [[double]]) -> [[double]] {
    let r = len(m1);
    let c = len(m1[0]);
    let m = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m[i][j] = m1[i][j] - m2[i][j];
        }
    }
    return m;
}

fun powmat(m : [[double]], p : double) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m2[i][j] = pow(m[i][j], p);
        }
    }
    return m2;
}

fun max(a : double, b : double) -> double {
    if a > b {
        return a;
    } else {
        return b;
    }
    return b;
}

fun mat(a : int, b : int) -> [[double]] {
    let m = make([[double]], a);
    for i in 0..a {
        m[i] = make([double], b);
    }
    return m;
}

fun relu(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m2[i][j] = max(0.0, m[i][j]);
        }
    }
    return m2;
}

fun drelu(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            if m[i][j] < 0.0 {
                m2[i][j] = 0.0;
            } else {
                m2[i][j] = m[i][j];
            }
        }
    }
    return m2;
}

fun sigmoid(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m2[i][j] = 1.0 / (1.0 + exp(-m[i][j]));
        }
    }
    return m2;
}

fun tanh(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m2[i][j] = (exp(m[i][j]) - exp(-m[i][j])) / (exp(m[i][j]) + exp(-m[i][j]));
        }
    }
    return m2;
}

fun dtanh(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(r, c);
    for i in 0..r {
        for j in 0..c {
            m2[i][j] = 1.0 - pow(m[i][j], 2.0);
        }
    }
    return m2;
}

fun summat(m : [[double]]) -> double {
    let s = 0.0;
    let i = 0;
    let r = len(m);
    let c = len(m[0]);
    while i < r {
        let j = 0;
        while j < c {
            s = s + m[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    return s;
}

fun matmul(m1 : [[double]], m2 : [[double]]) -> [[double]] {
    //m1 x m2
    //m1: r x c
    //m2: c x r2
    let r = len(m1);
    let c = len(m1[0]);
    let c2 = len(m2);
    let r2 = len(m2[0]);
    if c != c2 {
        print("error: matmul \t size: ", r, " x ", c, " with ", c2, " x ", r2, "\n");
        exit(1);
        return make([[double]]); //to make the semantic check pass
    }
    let m = mat(r, r2);
    let i = 0;
    while i < r {
        let j = 0;
        while j < r2 {
            let k = 0;
            let s = 0.0;
            while k < c {
                s = s + m1[i][k] * m2[k][j];
                k = k + 1;
            }
            m[i][j] = s;
            j = j + 1;
        }
        i = i + 1;
    }
    return m;
}

fun hadamard(m1 : [[double]], m2 : [[double]]) -> [[double]] {
    //m1 x m2
    //m1: r x c
    //m2: r x c
    let r = len(m1);
    let c = len(m1[0]);
    let r2 = len(m2);
    let c2 = len(m2[0]);
    if c != c2 || r != r2 {
        print("error: hadamard \t size: ", r, " x ", c, " with ", r2, " x ", c2, "\n");
        exit(1);
        return make([[double]]); //to make the semantic check pass
    }
    let m = mat(r, c);
    let i = 0;
    while i < r {
        let j = 0;
        while j < c {
            m[i][j] = m1[i][j] * m2[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    return m;
}


// matmul with a constant
fun matmulc(mat: [[double]], v: double) -> [[double]] {
    let r = len(mat);
    let c = len(mat[0]);
    for i in 0..r {
        for j in 0..c {
            mat[i][j] = mat[i][j] * v;
        }
    }
    return mat;
}

fun transpose(m : [[double]]) -> [[double]] {
    let r = len(m);
    let c = len(m[0]);
    let m2 = mat(c, r);
    let i = 0;
    while i < r {
        let j = 0;
        while j < c {
            m2[j][i] = m[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
    return m2;
}

fun print_size(m : [[double]]) {
    print("size: ", len(m), " x ", len(m[0]), "\n");
}

fun main() {
    let input_size = 2;
    let hidden_size = 48;
    let output_size = 1;

    let w1 = randmat(hidden_size, input_size);
    let w2 = randmat(output_size, hidden_size);

    print("w1: ", w1, "\n");
    print("w2: ", w2, "\n");
    
    let lr = 0.025;

    //training xor
    let _x = [[0.0, 0.0], [0.0, 1.0], [1.0, 0.0], [1.0, 1.0]];
    let x = transpose(_x);
    let y = [[1.0, 0.0, 0.0, 1.0]];

    print(x, "\n");

    let i = 0;
    while i < 100000 {
        //forward
        let h = tanh(matmul(w1, x));
        let h2 = relu(matmul(w2, h));
        let diff = submat(h2, y);

        //loss
        let loss = summat(powmat(diff, 2.0));
        if i % 1000 == 0 {
            print("i: ", i, "\n");
            print("loss: ", loss, "\n");
            print("preds: ", h2, "\n");
        }

        //backward, compute gradients
        let hw_gt_0 = drelu(h2);
        // print("hw_gt_0: ", hw_gt_0, "\n");
        let grad_h2 = hadamard(diff, hw_gt_0);
        // print("grad_h2: ", grad_h2, "\n");
        let grad_w2 = matmul(grad_h2, transpose(h));
        // print("grad_w2: ", grad_w2, "\n");
        let deriv_h = dtanh(h);
        // print("deriv_h: ", deriv_h, "\n");
        let grad_h = hadamard(matmul(transpose(w2), grad_h2), deriv_h);
        let grad_w1 = matmul(grad_h, transpose(x));        

        //update
        w1 = submat(w1, matmulc(grad_w1, lr));
        w2 = submat(w2, matmulc(grad_w2, lr));

        i = i + 1;
    }
}
