// ./sahl exe.bin > image.pgm
// display image.pgm

// takes about 2 minutes

fun sqr(a: double) -> double {
    return a * a;
}

// regs is 4x2 array of doubles
fun interpret(regs: [[double]], code: [char]) {
    let i = 0;
    let l = len(code);
    let a_charcode = cast('a', int);
    while i < l {
        let c1 = cast(code[i + 1], int);
        let src = regs[c1 - a_charcode];
        let c2 = cast(code[i + 2], int);
        let dest = regs[c2 - a_charcode];
        if code[i] == '=' {
            dest[0] = src[0];
            dest[1] = src[1];
        } else if code[i] == '+' {
            dest[0] = dest[0] + src[0];
            dest[1] = dest[1] + src[1];
        } else if code[i] == '*' {
            let r = (dest[0] * src[0]) - (dest[1] * src[1]);
            let i = (dest[0] * src[1]) + (dest[1] * src[0]);
            dest[0] = r;
            dest[1] = i;
        }
        i = i + 3;
    }
}

fun main() {
    let registers = [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]];
    let i = 0;
    let x = 0;
    let y = 0;
    let code = ['*', 'b', 'b', '+', 'a', 'b'];
    print("P5\n1600 900\n255\n");
    while y < 900 {
        x = 0;
        let line = make([char], 1600);
        while x < 1600 {
            registers[0][0] = 2.0 * 1.6 * (cast(x, double) / 1600.0 - 0.5);
            registers[0][1] = 2.0 * 0.9 * (cast(y, double) / 900.0 - 0.5);
            i = 1;
            while i < 4 {
                registers[i][0] = 0.0;
                registers[i][1] = 0.0;
                i = i + 1;
            }
            i = 0;
            while i < 256 && ((sqr(registers[1][0]) + sqr(registers[1][1])) < 4.0) {
                interpret(registers, code);
                i = i + 1;
            }
            line[x] = cast(i, char);
            x = x + 1;
        }
        for c in line {
            print(c);
        }
        y = y + 1;
    }
}